import connectK.CKPlayer;
import connectK.BoardModel;

import java.awt.Point;
import java.util.ArrayList;
import java.util.List;


public class FrAInkenstienAI extends CKPlayer {

	//int depth_limit;
	int opponent;
	int ai_player;
	
	public FrAInkenstienAI(byte player, BoardModel state) 
	{
		super(player, state);
		teamName = "FrAInkenstein";
		depth_limit = state.gravityEnabled() ? 3 : 2;
		ai_player = player;
		
		if (player == 1)
		{
			opponent = 2;
		}
		else
		{
			opponent = 1;
		}
	}

	@Override
	public Point getMove(BoardModel state) 
	{
		return getMove(state, 5000);	
	}

	@Override
	public Point getMove(BoardModel state, int deadline) 
	{
		long stop_time = System.currentTimeMillis() + deadline;
		
		FrAInkensteinNode tree = new FrAInkensteinNode(state);
		FrAInkensteinNode best_node = tree;
		
		int limit = 1;
		Point best_move = null;
		
		while (System.currentTimeMillis() < stop_time && limit <= state.spacesLeft)
		{
			expandTree(tree, 0, limit, stop_time, ai_player);
			//tree.printTree(tree, 0, 3);
		
			if (System.currentTimeMillis() < stop_time && limit <= state.spacesLeft)
			{
				// MIN-MAX Search
				//BoardModel next_state = minmaxSearch(tree, limit, stop_time).getState();
				
				// ALPHA-BETA Search
				BoardModel next_state = alphabetaSearch(tree, limit, stop_time).getState();
				
				findMove(state, next_state);
			}
		}
		
		return best_move;
	}
	
	private void expandTree(FrAInkensteinNode node, int depth, int depth_limit, long stop_time, int current_player)
	{
		if (System.currentTimeMillis() > stop_time)
		{
			return;
		}
		//System.out.println("EXPANDING AT DEPTH: " + depth);
		//System.out.println(node.getState());
		if (node.getState().gravityEnabled())
		{
			for (int col = 0; col < node.getState().getWidth(); col++)
			{
				if (System.currentTimeMillis() > stop_time)
				{
					return;
				}
				
				if ( (node.getState().getSpace(col, node.getState().getHeight()-1)) == 0 )
				{
					BoardModel new_board = node.getState().clone();
					new_board = new_board.placePiece(new Point (col, node.getState().getHeight()-1), (byte) current_player);
					FrAInkensteinNode new_node = new FrAInkensteinNode(new_board);
					node.addChild(new_node);
					if (depth < depth_limit)
					{
						expandTree(new_node, depth + 1, depth_limit, stop_time, (current_player == 1) ? 2 : 1);
					}
				}
			}
		}
		else
		{
			for (int row = 0; row < node.getState().getHeight(); row++)
			{
				if (System.currentTimeMillis() > stop_time)
				{
					return;
				}
				for (int col = 0; col < node.getState().getWidth(); col++)
				{
					if (System.currentTimeMillis() > stop_time)
					{
						return;
					}
					if (node.state.getSpace(col, row) == 0)
					{
						BoardModel new_board = node.getState().clone();
						new_board = new_board.placePiece(new Point (col, row), (byte) current_player);
						//BoardModel new_board = node.getState().placePiece(new Point (col, row), (byte) current_player);
						FrAInkensteinNode new_node = new FrAInkensteinNode(new_board);
						node.addChild(new_node);
						if (depth < depth_limit)
						{
							expandTree(new_node, depth + 1, depth_limit, stop_time, (current_player == 1) ? 2 : 1);
						}	
					}
				}
			}
		}
	}
	
	private boolean terminal(BoardModel state)
	{
		return (heuristic(state) == Integer.MAX_VALUE || heuristic(state) == Integer.MIN_VALUE);
	}
	
	private FrAInkensteinNode alphabetaSearch(FrAInkensteinNode node, int limit, long stop_time)
	{
		int alpha = Integer.MIN_VALUE;
		int beta = Integer.MAX_VALUE;
		
		int best_index = 0;
		int best_value = Integer.MIN_VALUE;
		
		for (int child = 0; child < node.getChildren().length; child++)
		{
			if (System.currentTimeMillis() > stop_time)
			{
				return node.getChildren()[best_index];
			}
			int child_value = ABminValue(node.getChildren()[child], alpha, beta, 0, limit, stop_time);
			node.getChildren()[child].setValue(child_value);
			alpha = child_value;
			if (child_value >= best_value)
			{
				best_value = child_value;
				best_index = child;
			}
		}
		return node.getChildren()[best_index];
	}
	
	private int ABmaxValue (FrAInkensteinNode node, int alpha, int beta, int depth, int depth_limit, long stop_time)
	{
		if (depth == depth_limit)
		{
			return heuristic(node.getState());
		}
		if (terminal(node.getState()))
		{
			return heuristic(node.getState());
		}
		
		int max_val = Integer.MIN_VALUE;
		
		for (int child = 0; child < node.getChildren().length; child++)
		{
			if (System.currentTimeMillis() > stop_time)
			{
				return heuristic(node.getState());
			}
			int child_value = ABminValue(node.getChildren()[child], alpha, beta, depth + 1, depth_limit, stop_time);
			if (child_value >= max_val)
			{
				max_val = child_value;
				max_val = child;
			}
			if (alpha >= beta)
			{
				return Integer.MAX_VALUE;
			}
		}
		return max_val;
	}
	
	private int ABminValue (FrAInkensteinNode node, int alpha, int beta, int depth, int depth_limit, long stop_time)
	{
		if (depth == depth_limit)
		{
			return heuristic(node.getState());
		}
		if (terminal(node.getState()))
		{
			return heuristic(node.getState());
		}
		
		int max_val = Integer.MIN_VALUE;
		
		for (int child = 0; child < node.getChildren().length; child++)
		{
			if (System.currentTimeMillis() > stop_time)
			{
				return heuristic(node.getState());
			}
			int child_value = ABmaxValue(node.getChildren()[child], alpha, beta, depth + 1, depth_limit, stop_time);
			if (child_value >= max_val)
			{
				max_val = child_value;
				max_val = child;
			}
			if (alpha >= beta)
			{
				return Integer.MIN_VALUE;
			}
		}
		return max_val;
	}
	
	private FrAInkensteinNode minmaxSearch(FrAInkensteinNode node, int depth_limit, long stop_time)
	{
		int best_index = 0;
		int best_value = Integer.MIN_VALUE;
		//System.out.println("CHILD VALUES: ");
		for (int child = 0; child < node.getChildren().length; child++)
		{
			int child_value = minValue(node.getChildren()[child], 0, depth_limit);
			node.getChildren()[child].setValue(child_value);
			//System.out.print(child_value + " (index: " + child+ "), ");
			if (child_value >= best_value)
			{
				//System.out.print("Updating best_value. Was: " + best_value + " Now: " + child_value);
				best_value = child_value;
				best_index = child;
				
			}
			//System.out.println();
		}
//		System.out.println("Best Value: " + best_value + " At index: " + best_index);
//		System.out.print("Children Values: ");
//		for (int child = 0; child < node.getChildren().length; child++)
//		{
//			System.out.print(node.getChildren()[child].getValue() + ", ");
//		}
//		System.out.println();
		 return node.getChildren()[best_index];
	}
	
	private int maxValue(FrAInkensteinNode node, int depth, int depth_limit)
	{
		
		if (depth == depth_limit)
		{
			//System.out.println("DEPTH REACHED(MAX): " + heuristic(node.getState()));
			return heuristic(node.getState());
		}
		
		if (terminal(node.getState()))
		{
			//System.out.println("TERMINAL(MAX): " + heuristic(node.getState()));
			return heuristic(node.getState());
		}
		
		int max_val = Integer.MIN_VALUE;
		
		for (int child = 0; child < node.getChildren().length; child++)
		{
			int child_value = minValue(node.getChildren()[child], depth + 1, depth_limit);
			if (child_value >= max_val)
			{
				max_val = child_value;
				max_val = child;
			}
		}
		return max_val;
	}
	
	private int minValue(FrAInkensteinNode node, int depth, int depth_limit)
	{
		
		if (depth == depth_limit)
		{
			//System.out.println("DEPTH REACHED(MIN): " + heuristic(node.getState()));
			//System.out.println("HEURISTIC SCORE: " + heuristic(node.getState()) + " at depth: " + depth);
			return heuristic(node.getState());
		}
		
		if (terminal(node.getState()))
		{
			//System.out.println("TERMINAL(MIN): " + heuristic(node.getState()));
			return heuristic(node.getState());
		}
		
		int min_val = Integer.MAX_VALUE;
		
		for (int child = 0; child < node.getChildren().length; child++)
		{
			int child_value = maxValue(node.getChildren()[child], depth + 1, depth_limit);
			if (child_value <= min_val)
			{
				min_val = child_value;
				min_val = child;
			}
		}
		
		return min_val;
	}
	
	private Point findMove(BoardModel state1, BoardModel state2)
	{
		for (int row = 0; row < state1.getHeight(); row++)
		{
			for (int col = 0; col < state1.getWidth(); col++)
			{
				if (state1.getSpace(col, row) != state2.getSpace(col, row))
				{
					return new Point(col, row);
				}
			}
		}
		return null;
	}
	
	private int heuristic(BoardModel state)
	{
		int ai_score = 0; 
		int op_score = 0;
		
		// Print Heuristic Valiues here V
		for (int row = 0; row < state.getHeight(); row++)
		{
			for (int col = 0; col < state.getWidth(); col++)
			{
				if (state.getSpace(col, row) == ai_player)
				{
					ai_score += score(state, row, col, ai_player);
				}
				if (state.getSpace(col, row) == opponent)
				{
					op_score += score(state, row, col, opponent);
				}
			}
			
		}
		
		//System.out.println("AI: " + ai_score + " OPPONENT: " + op_score);
		return ai_score - op_score;
	}
	
	private int score(BoardModel state, int row, int col, int current_player)
	{
		int tally = 0;
		
		tally += search(state, current_player, row, col, 1, 0); 	// Horizontal
		tally += search(state, current_player, row, col, 0, 1); 	// Vertical
		tally += search(state, current_player, row, col, 1, 1); 	// Diagonal Up
		tally += search(state, current_player, row, col, 1, -1);	// Diagonal Down
		
		return tally;
	}
	
	private int search(BoardModel state, int current_player, int row, int col, int row_change, int col_change)
	{
		List<Integer> search_list = new ArrayList<Integer>();
		int start_row = row;
		int start_col = col;
		
		// Positive Search
		while ( (0 <= row+row_change) && (row+row_change < state.getHeight()) && (0 <= col+col_change) && (col+col_change < state.getWidth()) 
				&&  (state.getSpace(col+col_change, row+row_change) != ((current_player == 1) ? 2 : 1) ) )
		{
			row = row+row_change;
			col = col+col_change;
			
			search_list.add( (int)state.getSpace(col, row) );
		}
		row = start_row;
		col = start_col;
		// Negative Search
		while ( (0 <= row-row_change) && (row-row_change < state.getHeight()) && (0 <= col-col_change) && (col-col_change < state.getWidth())
				&&  (state.getSpace(col-col_change, row-row_change) != ((current_player == 1) ? 2 : 1) ) )
		{
			row = row-row_change;
			col = col-col_change;
			
			search_list.add( (int)state.getSpace(col, row) );
		}
		
		int score = 0;
		
		if (search_list.size() >= state.getkLength()-1)
		{
			for (int item: search_list)
			{
				if (item == 0)
				{
					score += 1;
				}
				else
				{
					score += 2;
				}
			}
		}
		return score;
	}
}
	
	
	
	
	
	
	
	
	
	
	
	