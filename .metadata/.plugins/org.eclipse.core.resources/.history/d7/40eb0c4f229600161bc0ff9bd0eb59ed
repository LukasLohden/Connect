import connectK.CKPlayer;
import connectK.BoardModel;

import java.awt.Point;


public class FrAInkenstienAI extends CKPlayer {

	public FrAInkenstienAI(byte player, BoardModel state) 
	{
		super(player, state);
		teamName = "FrAInkenstein";
	}

	@Override
	public Point getMove(BoardModel state) 
	{
		return getMove(state, 5000);	
	}

	@Override
	public Point getMove(BoardModel state, int deadline) 
	{
		long stopTime = System.currentTimeMillis() + deadline;
		Point nextMove = null;
		int depthLimit = 1;
		
		FrAInkensteinNode currentNode = new FrAInkensteinNode(state);
		FrAInkensteinNode nextNode = currentNode;
		
		while (System.currentTimeMillis() < stopTime)
		{
			expandNode(currentNode, true, depthLimit, stopTime);
		}
		
		return getMove(state); // Temporary
	}
	public Point minmax(FrAInkensteinNode node, int depth, long stopTime)
	{
		return getMove(node.state); // Temporary
	}
	
	public void expandNode(FrAInkensteinNode node, boolean maximize, int depthLimit, long stopTime)
	{
		if (depthLimit == 0)
		{
			if (maximize)
			{
				for
			}
		}
	}
}